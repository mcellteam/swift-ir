Joel Notes

Model-view-controller (software design pattern)
    Model: The backend that contains all the data logic
    View: The frontend or graphical user interface (GUI)
    Controller: The brains of the application that controls how data is displayed

These are the fundamental modules used by Python’s Qt binding, specifically PyQt5.
    Qt: It combines all the classes/modules mentioned below into a single module. It considerably increases the memory
      used by the application. However, it’s easier to manage the framework by only importing one module.
    QtCore: Contains the core non-graphical classes used by other modules. This is where the Qt event loop, signals,
      and slot-connectivity, etc. are implemented.
    QtWidgets: Contains most of the widgets available in Pyqt5.
    QtGui: Contains GUI components and extends the QtCore module.
    QtNetwork: Contains classes used to implement network programming through Qt. It supports TCP servers, TCP sockets,
      UDP sockets, SSL handling, network sessions, and DNS lookups.
    QtMultimedia provides low-level multimedia functionality.
    QtSql: implements database integration for SQL databases. Supports ODBC, MySQL, Oracle, SQLite, and PostgreSQL.


Potentially useful widgets:
    QSplitter: Splitters are used to separate the contents of a window so that the widgets are grouped properly and do
      not appear cluttered. QSplitter is one of the primary layout handlers available in PyQt5 and is used to split the
      content both horizontally and vertically.
    QDock: A dock widget is a sub-window with two properties:
      It can be moved within the main window and
      It can be docked outside the parent window to another location on the screen.


On macOS when a push button’s width becomes smaller than 50 or its height becomes smaller than 30, the button’s corners
are changed from round to square. Use the setMinimumSize() function to prevent this behavior.




























TODO Task list (add date when completed):


1) Sort Scales in Menu (Done: March 21st, 2020)
2) Copy Skip status to other scales? (Done: March 24th, 2020 ... New buttons to clear/copy)
     Optional. Might want to unskip at finer scale as alignement is refined.
3) Remember corresponding image zoom and relative position across scales
4) Show Status info:
     a) Progress while generating scales (Prototype created March 23rd, 2020, problems on Mac)
     b) Progress while aligning
     c) Status of project:
        i)   Perhaps need project description/metadata field?
        ii)  Perhaps need flag to mark in-work status?
        iii) Done scales (meaning afm's for all base images)
        iv)  Next scale TBD (next finest scale with missing afm's)

5) Buttons for "Refine Affine" and "Apply Affine" (Buttons Added March 24th, 2020)
6) Button for remaking aligned images with nulled bias.
   a) store bias stats for given scale
   b) store bias function (as eval function string) in data model
7) Parameter for whitening factor                    (Parameter Added March 24th, 2020)
8) Parameter for wsf (swiftir window scaling factor)  (Parameter Added March 24th, 2020)
   a) Whole stack
   b) custom value for a given problematic image
   

Wish List (add date when completed):

Some thoughts while working remotely from home on my Mac using X to eccles.
Mac on WiFi 5GHz 802.11n.  Ookla SpeedTest 70Mbps download, 6Mbps upload.
Likely useful when using alignem_swift.py via the 3DEM portal on TACC.

1) Jump to Frame #                            (Done: March 21st, 2020)
     Scrolling is a bit slow over X.  About 1 fps.


Bug Reports (add date when competed):

1) Unusual crashes due to "malloc" errors:

  These have happened while rapidly scrolling through the stack.

  Because they appear to be due to the Python interpreter crashing,
  there is very little debug information available.
  All of these crashes have happened on the older Macintosh.

   Thursday, March 26th, 2020
    Child of MultiImagePanel
      load_image_worker finished for: ".../source/PySide2/testtom2/scale_5/img_aligned/vj_097_shift_rot_skew_crop_4k4k_4.jpg"
      load_image_worker finished for: ".../source/PySide2/testtom2/scale_5/img_aligned/vj_097_shift_rot_skew_crop_4k4k_5.jpg"
    Python(1400,0x700001e59000) malloc: *** error for object 0x7fdf1ed031d0: double free
    *** set a breakpoint in malloc_error_break to debug
      load_image_worker finished for: ".../source/PySide2/testtom2/scale_5/img_aligned/vj_097_shift_rot_skew_crop_4k4k_2.jpg"
    Abort trap: 6

  Friday, March 27th, 2020
    Python(2622,0x7fff7d4e8000) malloc: *** error for object 0x7fed83e4c418: incorrect checksum for freed object - object was probably modified after being freed.
    *** set a breakpoint in malloc_error_break to debug
    Abort trap: 6

  Tuesday, March 31st, 2020
    Update_siblings called, calling siblings.update_self
    Child of MultiImagePanel
      load_image_worker finished for: ".../source/PySide2/align_fwd_test_2020_03_31/scale_2/img_aligned/vj_097_shift_rot_skew_crop_2.jpg"
      load_image_worker finished for: ".../source/PySide2/align_fwd_test_2020_03_31/scale_2/img_aligned/vj_097_shift_rot_skew_crop_5.jpg"
      load_image_worker finished for: ".../source/PySide2/align_fwd_test_2020_03_31/scale_2/img_aligned/vj_097_shift_rot_skew_crop_4.jpg"
    Python(5455,0x700001cd0000) malloc: *** error for object 0x7f86548001c0: pointer being freed was not allocated
    *** set a breakpoint in malloc_error_break to debug
    Abort trap: 6

  Wednesday, April 1st, 2020
    Child of MultiImagePanel
      Forced load of image: ".../source/PySide2"
      load_image_worker finished for: ".../source/PySide2/align_fwd_test_2020_04_01/scale_1/img_src/vj_097_shift_rot_skew_crop_6.jpg"
    QPaintDevice: Cannot destroy paint device that is being painted
    Python(5887,0x700002759000) malloc: *** error for object 0x7fec175183e0: pointer being freed was not allocated
    *** set a breakpoint in malloc_error_break to debug
    Abort trap: 6

2) Not generating all scales

  Sometimes the JSON file will contain layers for only the first scale,
  but no layers for any of the other scales. When this happens, generation
  of scales proceeds properly, but no scaled images are generated because
  the image stacks for the scales are empty. The key question here is: How
  does such a JSON file get created?

3) Changing roles generates additional panels

  The changing of roles does not seem to work properly in aligem.py.
  Adding a role ('x1') to the default roles ('ref', 'base', 'aligned') gives:
    'ref' 'base' 'aligned' 'ref' 'base' 'aligned' 'x1'
